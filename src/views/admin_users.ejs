<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quản lý Người dùng</title>
     <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* Thêm CSS cơ bản cho bảng */
        body { font-family: sans-serif; margin: 0; background-color: #f8f9fa; }
        .header { background-color: #343a40; color: white; padding: 1rem; display: flex; justify-content: space-between; align-items: center; }
        .header h1 { margin: 0; font-size: 1.5rem; }
        .header a { color: #ffc107; text-decoration: none; }
        .container { padding: 2rem; }
        table { width: 100%; border-collapse: collapse; background: white; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
        th, td { padding: 0.75rem; border: 1px solid #dee2e6; text-align: left; }
        th { background-color: #e9ecef; }
        .action-buttons a { margin-right: 0.5rem; color: #007bff; text-decoration: none; }
        .action-buttons a.delete { color: #dc3545; }
         .back-link { display: inline-block; margin-bottom: 1rem; color: #007bff; text-decoration: none;}
         .back-link i { margin-right: 0.5rem; }
    .action-buttons button { /* Style cho nút bấm */
            background: none; border: none; padding: 0; cursor: pointer; margin-right: 0.5rem; color: #007bff;
        }
        .action-buttons button.delete { color: #dc3545; }
        .action-buttons button i { margin-right: 0.3rem; }
    </style>
</head>
<body>
    <div class="header">
        <h1>Quản lý Người dùng</h1>
        <a href="/api/admin/logout">Đăng xuất</a>
    </div>

    <div class="container">
        <a href="/api/admin/dashboard" class="back-link"><i class="fas fa-arrow-left"></i> Quay lại Dashboard</a>
        <h2>Danh sách Người dùng</h2>

        <% if (typeof users !== 'undefined' && users.length > 0) { %>
            <table id="user-table"> <thead>
                    <tr>
                        <th>ID</th>
                        <th>Email</th>
                        <th>Họ tên</th>
                        <th>Vai trò</th>
                        <th>Ngày tạo</th>
                        <th>Hành động</th>
                    </tr>
                </thead>
                <tbody>
                    <% users.forEach(user => { %>
                        <tr data-user-id="<%= user.id %>"> <td><%= user.id %></td>
                            <td><%= user.email %></td>
                            <td><%= user.full_name %></td>
                            <td><%= user.role %></td>
                            <td><%= new Date(user.created_at).toLocaleDateString('vi-VN') %></td>
                            <td class="action-buttons">
                                <a href="/api/admin/users/<%= user.id %>/edit">
                                    <i class="fas fa-edit"></i> Sửa
                                </a>
                                <button class="delete" onclick="deleteUser('<%= user.id %>')">
                                    <i class="fas fa-trash-alt"></i> Xóa
                                </button>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        <% } else { %>
            <p>Không có người dùng nào.</p>
        <% } %>
    </div>

    <script>
        // Hàm lấy token từ localStorage
            function getAuthToken() {
                return localStorage.getItem('adminToken');
            }

            // Hàm tạo headers kèm token
            function createAuthHeaders() {
                const token = getAuthToken();
                const headers = {
                    'Content-Type': 'application/json'
                };
                if (token) {
                    headers['Authorization'] = `Bearer ${token}`; 
                }
                return headers;
            }
        // Hàm sửa vai trò
        function editUser(userId) {
            const row = document.querySelector(`tr[data-user-id="${userId}"]`);
            if (!row) return;

            // Lấy dữ liệu hiện tại từ bảng HTML (cần thêm class cho các ô td)
            const currentEmail = row.querySelector('.user-email')?.textContent || '';
            const currentName = row.querySelector('.user-name')?.textContent || '';
            const currentRole = row.querySelector('.user-role')?.textContent || '';
            // Lấy thêm các trường khác nếu bạn hiển thị chúng trong bảng

            // Hiện prompt cho từng trường
            const newName = prompt("Nhập Họ tên mới:", currentName);
            if (newName === null) return;
            const newEmail = prompt("Nhập Email mới:", currentEmail);
            if (newEmail === null) return;
            const newRole = prompt(`Nhập Vai trò mới (candidate, recruiter, admin):`, currentRole);
             if (newRole === null) return;

            if (!newName.trim() || !newEmail.trim() || !newRole.trim()) {
                alert("Họ tên, Email và Vai trò không được để trống.");
                return;
            }
             if (!['candidate', 'recruiter', 'admin'].includes(newRole)) {
                 alert('Vai trò không hợp lệ.');
                 return;
             }

            const updatedData = {
                full_name: newName,
                email: newEmail,
                role: newRole,
            };

            fetch(`/api/admin/users/${userId}`, { 
                method: 'PUT',
                headers: createAuthHeaders(),
                body: JSON.stringify(updatedData) 
            })
            .then(response => response.json().then(data => ({ ok: response.ok, body: data })))
            .then(({ ok, body }) => {
                alert(body.message || 'Có lỗi xảy ra.');
                if (ok) {
                    window.location.reload();
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Có lỗi xảy ra khi cập nhật vai trò.');
            });
        }

        // Hàm xóa người dùng
        function deleteUser(userId) {
        console.log("Gọi hàm deleteUser với ID:", userId); // Kiểm tra ID
         if (confirm(`Bạn có chắc chắn muốn xóa User ID ${userId} không?`)) {
             fetch(`/api/admin/users/${userId}`, {
                 method: 'DELETE',
                 headers: createAuthHeaders() // Sử dụng headers có token
             })
             .then(response => { // Log thêm response status
                 console.log("Response status khi xóa:", response.status);
                 // Xử lý lỗi 401/403 rõ ràng hơn
                 if (!response.ok) {
                     return response.json().then(err => { throw new Error(err.message || `Lỗi ${response.status}`); });
                 }
                 return response.json().then(data => ({ ok: response.ok, body: data }));
             })
             .then(({ ok, body }) => {
                 alert(body.message || 'Có lỗi xảy ra.');
                 if (ok) { window.location.reload(); }
             })
             .catch(error => {
                 console.error('Lỗi khi gọi API xóa:', error);
                 alert(`Lỗi khi xóa người dùng: ${error.message}`);
             });
         }
     }
    </script>

</body>
</html>